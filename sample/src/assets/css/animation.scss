@use "sass:math";

@mixin sp-layout {
  @media screen and (max-width: 750px) {
    @content;
  }
}

@function random_range($min, $max) {
  $rand: math.random();
  $random_range: $min + math.floor($rand * (($max - $min) + 1));
  @return $random_range;
}

// animation.scss
.profile-container {
  position: relative;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

.stars {
  position: absolute;
  top: 0;
  left: 0;
  width: 60vw;
  height: 60vh;
  z-index: -10; 
  overflow: hidden;
  pointer-events: none;
  transform: rotate(-45deg);
}

.star {
  width: 2px;
  height: 2px;
  background: white;
  position: absolute;
  border-radius: 50%;
  // Animation properties (adjust as needed for desired effect)
  animation: twinkle 1s infinite ease-in-out alternate;
}

// Optional: Twinkle animation for stars
@keyframes twinkle {
  0% { opacity: 0.5; }
  100% { opacity: 1; }
}



.star {
  $star-count: 25; 
  --star-color: #0b82aa; 
  --star-tail-length: 6em;
  --star-tail-height: 2px;
  --star-width: calc(var(--star-tail-length) / 6);
  --fall-duration: 9s;
  --tail-fade-duration: var(--fall-duration);

  position: absolute;
  top: var(--top-offset);
  left: 0;
  width: var(--star-tail-length);
  height: var(--star-tail-height);
  color: var(--star-color);
  background: linear-gradient(45deg, currentColor, transparent);
  border-radius: 50%;
  filter: drop-shadow(0 0 6px currentColor);
  transform: translate3d(104em, 0, 0);
  animation: fall var(--fall-duration) var(--fall-delay) linear infinite, tail-fade var(--tail-fade-duration) var(--fall-delay) ease-out infinite;

  @include sp-layout {
    // For mobile performance, tail-fade animation will be removed
    animation: fall var(--fall-duration) var(--fall-delay) linear infinite;
  }

  @for $i from 1 through $star-count {
    &:nth-child(#{$i}) {
      --star-tail-length: #{math.div(random_range(500em, 800em), 100)}; 
      --top-offset: #{math.div(random_range(0vh, 12000vh), 100)}; // Higher range for spacing
      --fall-duration: #{math.div(random_range(7000, 13000s), 1000)}; // Varied durations for smooth effects
      --fall-delay: #{math.div(random_range(0, 12000s), 1000)};
    }
  }

  &::before, &::after {
    position: absolute;
    content: '';
    top: 0;
    left: calc(var(--star-width) / -2);
    width: var(--star-width);
    height: 100%;
    background: linear-gradient(45deg, transparent, currentColor, transparent);
    border-radius: inherit;
    animation: blink 2s linear infinite;
  }

  &::before {
    transform: rotate(45deg);
  }

  &::after {
    transform: rotate(-45deg);
  }
}

@keyframes fall {
  to {
    transform: translate3d(-30em, 0, 0);
  }
}

@keyframes tail-fade {
  0%, 50% {
    width: var(--star-tail-length);
    opacity: 1;
  }

  70%, 80% {
    width: 0;
    opacity: 0.4;
  }

  100% {
    width: 0;
    opacity: 0;
  }
}

@keyframes blink {
  50% {
    opacity: 0.6;
  }
}

/* Performance Optimizations */
.space-card,
.star,
.animate-float,
.animate-spin,
.animate-pulse {
  will-change: transform, opacity;
  backface-visibility: hidden;
  transform: translateZ(0);
}

/* Reduce animation complexity on mobile */
@media (max-width: 768px) {
  .star {
    animation: none;
    opacity: 0.3;
  }
  
  .animate-float {
    animation-duration: 12s;
  }
  
  .animate-spin {
    animation-duration: 40s;
  }
}

/* Optimize for reduced motion */
@media (prefers-reduced-motion: reduce) {
  .star,
  .animate-float,
  .animate-spin,
  .animate-pulse,
  .animate-cosmic-rotate {
    animation: none;
  }
  
  .star {
    opacity: 0.5;
  }
}

/* Hardware acceleration for smooth animations */
.space-card:hover,
.group:hover .group-hover\:scale-110,
.group:hover .group-hover\:translate-y-2 {
  transform: translateZ(0);
  will-change: transform;
}

/* Optimize background animations */
body::before {
  will-change: transform;
  backface-visibility: hidden;
}

/* Reduce particle count on mobile */
@media (max-width: 768px) {
  .star:nth-child(n+25) {
    display: none;
  }
}

@media (max-width: 480px) {
  .star:nth-child(n+15) {
    display: none;
  }
}